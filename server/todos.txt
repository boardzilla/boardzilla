start w history
- initializeboard
- start loop
- await history run

start w/o history
- waitForPlayer
- initializeboard
- start loop





container
 zone - fixed size
  space - area, deck, spread?
   piece - left, top, right, bottom
 zone
 zone

- cancel removes the action record?
- idle out
X log???
  X each action creates a log{seq: [0: 'action', 1: 'action'...]...}
  X state broadcast with new log entry and merged into state
  - need a full refresh?
  - complete log messages
X clean up interface
  X put startup into state?
  X scope as current player
- email taken flash error
- spread space
X mobile events
X ..mobile layout
- bonus souls at start and replaceable
- rooms
X addPlayers multiple
X counter
- mouse tracking
- movement echo???
  - send last pos (zone,x,y)
  - translate zxy->zxy and apply transform
X put into deck at spot n
X reorder dungeon
X monster counter under middle decks and left align
X timeout?
X zoom changes when board moves?
X counter gets behind moves2
X heartbeat and connection status
X game chrome
X move *all* position styles up to the wrapper div, probably simplify the 3 cases
X untap all
X damage counter
X zoom with counters?
X better sidebar?
- escape stuck in drag? might be fixed
X card flipping in space - remove active from deck card
- ...homepage
- show errors from server
X new cards
X 2-sided cards
X counter move count
X entering game guard
X counter min, max
X nameplates covering cards
X 4-player layout fixes
X move() to top not working? external-dragging persisting
- session specific updates?
X fix drag outside player-mat?
X multiple actions (ctx menu)
X hidden attributes, exclude space/piece, x/y
X composite actions (hilite intermediates)
X drag-and-drop....?
- numerical action type
X undo/reset
X kb shortcuts?
X .mine class on client
X rseed
- debug pane
X EJS front pages
- ...game file packaging
X drag onto multiple areas? then cant be both mouse drag and mouse click?
X reorg actions logically under destination?
X moves sends blank actions
X prevent interrupting partial actions?
X layouts [other-player-mats, board, player-mat] (just 2-player hard-coded for now)
X monster stack or move placement, remove z-index
X reset rseed
X onMouseEnter revealed card
X undo/reset UI
X dice
X https://github.com/WebReflection/linkedom
X sequence breaking
X coin counters
X drag bug
X addCounter
X bonus souls
X zoom
- mobile viewport #messages visualViewport on resize
X decide on order in dom. whats top? re addPiece, move, etc (last item in children is top item on board)
X player-mats
X messages pane fixed with space at bottom
X prompt action type
X action conditions? inspect-char-deck: { if: ()=><deck in pile> }
.. custom area layouts (X stack, sorted?)
X find-and-bring-to-top???
X select-array action type
X counters up/down
X rseed
X drag translate x-y
- values can accept game => fn
X set up play areas (loot(deck, discard), shop(deck, discard, 1,2,3,4), monsters(deck, discard, 1,2,3,4), bonus, players: hand, play, look-at)
X deck hidden? or just lot of facedown cards with no visibility? (show 2 cards)

nice to haves
X better dice, server comms
- +/-n counters?
- toggle-panes

single giant procedure, can freeze history and rseed and replay state if lost connection

play: {
  do {
    // deal

    do {
      await anyPlayerPlay(passCard)
    } while (find('passed card').count < 12)

    // pass cards

    setCurrentPlayer(find('#2C').owner())
    await repeat(13, async {
      this.delete('led')
      await playersInTurn(turn => async {
        await card = currentPlayerPlay(playCard)
        if (turn === 0) this.set('led', card.suit)
      })
      // score trick      
    })
    // score hand
  } while (max(score) < 100)
}

playCard: card => {
  // 2C or led suit cards or not:H or whatever
  return this.choice(card, plays, () => {
    card.move('played.mine');
    return this.endTurn();




moves are:
  movex [el1, el2, el3]
  movey [el1, el2] [space1, space2]
  movez no-args
  moven number

sends: {
  movex: choices: [$el1, $el2, $el3], prompt: 'Move X'
  movey: choices: [$el1, $el2], prompt: 'Move Y'
  movez: prompt: 'Move Z',
}

appears as:
  el1 -> ctx-menu [Move X, Move Y] -> [space1, space2]
  el3 click
  'Move Z' button

2nd send: {
  movey: args:[$el1], choices: [$space1, $space2], prompt: 'Move Y into space'
}

appears as:
  'move Y into space' with $space1, $space2 hilited
  'cancel' (removes the action, re-requests starting data from server)





confirmation step required per move? just add additional arg, chooseAndConfirm() ? acceptable round-trip for this?

drag(pieces, space, prompt, (piece => fn))

function flip(card) {
  return game.choose(card, game.board.findAll('card'), "Flip", () => {
    card.set('flipped', !card.get('flipped'))
  })
}

const flip = game.simpleAction(
  "Do Something",
  () => do something,
)

const flip = game.pieceAction(
  "Flip",
  game.board.findAll('card'),
  card => card.set('flipped', !card.get('flipped')),
)

const flip = game.dragAction(
  "Flip",
  game.board.findAll('card'),
  space,
  card => card.set('flipped', !card.get('flipped')),
)

actions: {
  flip: chooseAction(choices, label, choice => action),
  play: chooseAction(choices, label, chooseAction(choices2, label, (choice, choice2) => action)),
}


createActions({
  flip: {
    prompt: 'Flip me!',
    select: 'card',
    action: card => toggle
  },
  takeCoins: {
    prompt: 'Take how many',
    drag: 'card',
    onto: 'tableau'
  },
  play: {
    prompt: 'Play this card',
    promptOnto: 'To which tableau',
    drag: 'card',
    onto: 'tableau'
  },
  pass: {
    prompt: 'Pass 3 card',
    select: 'card',
    number: 3
    move: 'pass#mine',
  },
  endTurn: {
    prompt: 'End turn',
  },
  spend: {
    select: 'card',
    prompt: 'Spend on a card',
    next: {
      select: 'resource'
      prompt: 'Which resource',
      action: (card, piece) => {card.move(piece)}
    }
  }
])


    client holds action, args... as it builds
    server responds with follow-up choices

    
chooseAction(cs, f(c -> ?)) -> f(c -> t/f/a)

chooseAction(cs, chooseAction


how specify allowed moves
- allowedMoveElements (within parent)
- dragAction appends another selector
- draggableSpaces(el)

spaces have drag properties (free-move, arrangeable, sorted)
dragging into a free-move has to record relative xy! tricky, come back to this?

